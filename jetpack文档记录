jetpack组件---Navigation
一、是什么？
1.是一个可简化Android导航的库和插件
2.Navigation是用来管理Fragment的切换，并且可以通过可视化的方式，看见App的交互流程

二、优点
1.处理Fragment的切换（上文已说过）
2.默认情况下正确处理Fragment的前进和后退
3.为过渡和动画提供标准化的资源
4.实现和处理深层连接
5.可以绑定Toolbar、BottomNavigationView和ActionBar等
6.SafeArgs（Gradle插件） 数据传递时提供类型安全性
7.ViewModel支持

三、最关键的三要素
1.Navigation Graph(New XML resource)：这是一个新的资源文件，用户在可视化界面可以看出他能够到达的Destination(用户能够到达的屏幕界面)，以及流程关系
2.NavHostFragment(Layout XML view)：当前Fragment的容器
3.NavController(Kotlin/Java object)：导航的控制者

四、利用SafeArgs传值
1.在项目目录下的build.gradle文件中添加 classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$navigationVersion"
2.模块下面的build.gradle文件添加 apply plugin: 'androidx.navigation.safeargs'
3.login_navigation.xml中
    <fragment
        android:id="@+id/register"
        android:name="com.example.jetpack.ui.fragment.login.RegisterFragment"
        android:label="RegisterFragment"
        tools:layout="@layout/fragment_register">
        <argument
            android:name="EMAIL"
            android:defaultValue="2005@qq.com"
            app:argType="string" />
        <argument
            android:name="account"
            android:defaultValue="xixi"
            app:argType="string" />
        <argument
            android:name="password"
            android:defaultValue="xixi"
            app:argType="string" />
    </fragment>
(1)a.name:标签名字
b.defaultValue:默认值
c.argType:标签类型
(2)编写完成后 点击Android studio中的Make Project按钮

五、Navigation可以绑定menus、drawers和bottomnavigation

六、回退栈
1.NavController.popBackStack()和NavController.navigateUp() 可以返回指定的目标
2.app:popUpTo:A->B->C,如果再从C->A意味着我们在导航的时候从回退栈中删除了 B,C。
3.app:popUpToInclusive="true" 我们同时弹出了回退栈中的第一个 A.要注意如果你没有使用，你的回退栈中将会包含两个A 的实例.



==================================================== 分割线 ====================================================
jetpack组件---Data Binding
一、MVVM模式
1.View层：xml、Activity、Fragment、Adapter和View等
2.Model层：数据源（本地数据和网络数据等）
3.ViewModel层：View层处理数据以及逻辑处理

二、Data Binding介绍
1.MVVM是一种架构模式
2.Data Binding是一个实现数据和UI绑定的框架，是构建MVVM模式的一个工具

三、实战步骤
1.app模块下的build.gradle文件添加内容
    dataBinding {
       enabled true
    }

2.创建登录的LoginModel，LoginModel主要负责登录逻辑的处理以及两个输入框内容改变的时候数据更新的处理
(1)ObservableField:其实是一个可观察的域，通过泛型来使用，可以使用的方法
a.ObservableField(T value) 构造函数，设置可观察的域
b.T get() 获取可观察的域的内容，可以使用UI控件监测它的值
c.set(T value) 设置可观察的域，设置成功之后，会通知UI控件进行更新

3.创建布局文件
(1)引入Data Binding之后的布局文件的使用方式会和以前的布局使用方式有很大的不同
(2)布局文件fragment_login2.xml
a.layout:用作布局的根节点，只能包裹一个View标签，且不能包裹merge标签。
b.data:Data Binding的数据，只能存在一个data标签。
c.variable:data中使用，数据的变量标签，type属性指明变量的类，如com.example.jetpack.ui.viewmodel.LoginModel。name属性指明变量的名字，方便布局中使用。
d.import:data中使用，需要使用静态方法和静态常量，如需要使用View.Visble属性的时候，则需导入<import type="android.view.View"/>。
type属性指明类的路径，如果两个import标签导入的类名相同，则可以使用alias属性声明别名，使用的时候直接使用别名即可。
e.include:View标签中使用，作用同普通布局中的include一样，需要使用bind:<参数名>传递参数

4.Data Binding还支持
运算符 + - / * %
字符串连接 +
逻辑与或 && ||
二进制 & | ^
一元 + - ! ~
移位 >> >>> <<
比较 == > < >= <= (Note that < needs to be escaped as <)
instanceof
Grouping ()
Literals - character, String, numeric, null
Cast
方法调用
域访问
数组访问
三元操作符

5.生成绑定类
布局文件创建完毕之后，点击Build下面的Make Project，让系统帮我生成绑定类







==================================================== 分割线 ====================================================
